package crawler

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestRegexpResidentDistrict1(t *testing.T) {
	testcases := [][]string{
		{
			"\n黄浦区\n2022年3月21日，黄浦区无新增本土确诊病例、49例本土无症状感染者，分别居住于：\n永年路24弄，\n建德路1号，\n已对相关居住地落实消毒等措施。",
			"黄浦区",
			"\n永年路24弄，\n建德路1号，",
		},
		{
			"\n黄浦区\n2022年3月21日，黄浦区无新增本土确诊病例、49例本土无症状感染者，分别居住于。\n永年路24弄，\n建德路1号，\n已对相关居住地落实消毒等措施。",
			"黄浦区",
			"\n永年路24弄，\n建德路1号，",
		},
		{
			"\n黄浦区\n2022年3月21日，黄浦区无新增本土确诊病例、49例本土无症状感染者，分别居住于，\n永年路24弄，\n建德路1号，\n已对相关居住地落实消毒等措施。",
			"黄浦区",
			"\n永年路24弄，\n建德路1号，",
		},
		{
			"\n黄浦区\n2022年3月21日，黄浦区无新增本土确诊病例、49例本土无症状感染者。分别居住于\n永年路24弄，\n建德路1号，\n已对相关居住地落实消毒等措施。",
			"黄浦区",
			"\n永年路24弄，\n建德路1号，",
		},
		{
			"\n黄浦区\n2022年3月21日，黄浦区无新增本土确诊病例、49例本土无症状感染者。\n分别居住于\n永年路24弄，\n建德路1号，\n已对相关居住地落实消毒等措施。",
			"黄浦区",
			"\n永年路24弄，\n建德路1号，",
		},
		{
			"\n黄浦区\n2022年3月21日，黄浦区无新增本土确诊病例、49例本土无症状感染者。\n分别居住于：\n永年路24弄，\n建德路1号，\n已对相关居住地落实消毒等措施。",
			"黄浦区",
			"\n永年路24弄，\n建德路1号，",
		},
		{
			"\n黄浦区\n2022年4月21日，奉贤区新增14例本土确诊病例，新增20例本土无症状感染者。上述人员均在隔离管控中发现，其涉及的场所已落实终末消毒等措施。",
			"黄浦区",
			"",
		},
		{
			"\n松江区\n（滑动查看更多↓）\n2022年4月21日，松江区新增22例本土确诊病例，新增471例本土无症状感染者，分别居住于：\n伴亭路855弄、\n宝胜路18号、",
			"松江区",
			"\n伴亭路855弄、\n宝胜路18号、",
		},
	}

	for i, c := range testcases {
		mm := reResidentDistrict1.FindAllStringSubmatch(c[0], -1)
		assert.NotNil(t, mm, fmt.Sprintf("匹配居住地信息失败：(%d) %q => nil", i, c[0]))
		if len(mm) > 0 {
			assert.Equal(t, c[1], mm[0][1], "匹配居住地区名称失败：(%d) %q", i, c[0])
			assert.Equal(t, c[2], mm[0][2], "匹配居住地区地址失败：(%d) %q", i, c[0])
		}
	}
}

func TestRegexpResidentDistrict2(t *testing.T) {
	testcases := [][]string{
		{
			"，病例2，男，73岁，居住于黄浦区顺昌路612弄，",
			"病例",
			"2",
			"男",
			"73",
			"黄浦区",
			"顺昌路612弄",
		},
		{
			"\n无症状感染者1，男，24岁，居住地为徐汇区沪闵路9490号，无症状",
			"无症状感染者",
			"1",
			"男",
			"24",
			"徐汇区",
			"沪闵路9490号",
		},
		{
			"无症状感染者7，男，36岁，系浦东机场安检工作人员，居住地为浦东新区祝桥镇邓一村，",
			"无症状感染者",
			"7",
			"男",
			"36",
			"浦东新区",
			"祝桥镇邓一村",
		},
		{
			"，无症状感染者13，男，3月龄，居住地为普陀区石泉东路240弄",
			"无症状感染者",
			"13",
			"男",
			"3月",
			"普陀区",
			"石泉东路240弄",
		},
	}

	for i, c := range testcases {
		mm := reResidentDistrict2.FindAllStringSubmatch(c[0], -1)
		assert.NotNil(t, mm, fmt.Sprintf("匹配居住地信息失败：(%d) %q => nil", i, c[0]))
		fmt.Println(mm)
		assert.Equal(t, 1, len(mm), "匹配居住地信息-长度不对：(%d) %q => %#v", i, c[0], mm)
		assert.Equal(t, 7, len(mm[0]), "匹配居住地信息-长度不对：(%d) %q => %#v", i, c[0], mm[0])
		if len(mm) > 0 {
			assert.Equal(t, c[1], mm[0][1], "匹配居住地-类型：(%d) %q", i, c[0])
			assert.Equal(t, c[2], mm[0][2], "匹配居住地-编号：(%d) %q", i, c[0])
			assert.Equal(t, c[3], mm[0][3], "匹配居住地-性别：(%d) %q", i, c[0])
			assert.Equal(t, c[4], mm[0][4], "匹配居住地-年龄：(%d) %q", i, c[0])
			assert.Equal(t, c[5], mm[0][5], "匹配居住地-区名称：(%d) %q", i, c[0])
			assert.Equal(t, c[6], mm[0][6], "匹配居住地-地址：(%d) %q", i, c[0])
		}
	}
}
